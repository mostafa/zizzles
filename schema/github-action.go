// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"
import "regexp"

type ExpressionSyntax string

// UnmarshalJSON implements json.Unmarshaler.
func (j *ExpressionSyntax) UnmarshalJSON(value []byte) error {
	type Plain ExpressionSyntax
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if matched, _ := regexp.MatchString(`^\$\{\{(.|[\r\n])*\}\}$`, string(plain)); !matched {
		return fmt.Errorf("field %s pattern match: must match %s", "", `^\$\{\{(.|[\r\n])*\}\}$`)
	}
	*j = ExpressionSyntax(plain)
	return nil
}

type GithubActionJson struct {
	// The name of the action's author.
	Author *string `json:"author,omitempty" yaml:"author,omitempty" mapstructure:"author,omitempty"`

	// You can use a color and Feather icon to create a badge to personalize and
	// distinguish your action. Badges are shown next to your action name in GitHub
	// Marketplace.
	Branding *GithubActionJsonBranding `json:"branding,omitempty" yaml:"branding,omitempty" mapstructure:"branding,omitempty"`

	// A short description of the action.
	Description string `json:"description" yaml:"description" mapstructure:"description"`

	// Input parameters allow you to specify data that the action expects to use
	// during runtime. GitHub stores input parameters as environment variables. Input
	// ids with uppercase letters are converted to lowercase during runtime. We
	// recommended using lowercase input ids.
	Inputs map[string]interface{} `json:"inputs,omitempty" yaml:"inputs,omitempty" mapstructure:"inputs,omitempty"`

	// The name of your action. GitHub displays the `name` in the Actions tab to help
	// visually identify actions in each job.
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// Outputs corresponds to the JSON schema field "outputs".
	Outputs interface{} `json:"outputs,omitempty" yaml:"outputs,omitempty" mapstructure:"outputs,omitempty"`

	// Runs corresponds to the JSON schema field "runs".
	Runs interface{} `json:"runs" yaml:"runs" mapstructure:"runs"`
}

// You can use a color and Feather icon to create a badge to personalize and
// distinguish your action. Badges are shown next to your action name in GitHub
// Marketplace.
type GithubActionJsonBranding struct {
	// The background color of the badge.
	Color *GithubActionJsonBrandingColor `json:"color,omitempty" yaml:"color,omitempty" mapstructure:"color,omitempty"`

	// The name of the Feather icon to use.
	Icon *GithubActionJsonBrandingIcon `json:"icon,omitempty" yaml:"icon,omitempty" mapstructure:"icon,omitempty"`
}

type GithubActionJsonBrandingColor string

const GithubActionJsonBrandingColorBlack GithubActionJsonBrandingColor = "black"
const GithubActionJsonBrandingColorBlue GithubActionJsonBrandingColor = "blue"
const GithubActionJsonBrandingColorGrayDark GithubActionJsonBrandingColor = "gray-dark"
const GithubActionJsonBrandingColorGreen GithubActionJsonBrandingColor = "green"
const GithubActionJsonBrandingColorOrange GithubActionJsonBrandingColor = "orange"
const GithubActionJsonBrandingColorPurple GithubActionJsonBrandingColor = "purple"
const GithubActionJsonBrandingColorRed GithubActionJsonBrandingColor = "red"
const GithubActionJsonBrandingColorWhite GithubActionJsonBrandingColor = "white"
const GithubActionJsonBrandingColorYellow GithubActionJsonBrandingColor = "yellow"

var enumValues_GithubActionJsonBrandingColor = []interface{}{
	"white",
	"black",
	"yellow",
	"blue",
	"green",
	"orange",
	"red",
	"purple",
	"gray-dark",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GithubActionJsonBrandingColor) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GithubActionJsonBrandingColor {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GithubActionJsonBrandingColor, v)
	}
	*j = GithubActionJsonBrandingColor(v)
	return nil
}

type GithubActionJsonBrandingIcon string

const GithubActionJsonBrandingIconActivity GithubActionJsonBrandingIcon = "activity"
const GithubActionJsonBrandingIconAirplay GithubActionJsonBrandingIcon = "airplay"
const GithubActionJsonBrandingIconAlertCircle GithubActionJsonBrandingIcon = "alert-circle"
const GithubActionJsonBrandingIconAlertOctagon GithubActionJsonBrandingIcon = "alert-octagon"
const GithubActionJsonBrandingIconAlertTriangle GithubActionJsonBrandingIcon = "alert-triangle"
const GithubActionJsonBrandingIconAlignCenter GithubActionJsonBrandingIcon = "align-center"
const GithubActionJsonBrandingIconAlignJustify GithubActionJsonBrandingIcon = "align-justify"
const GithubActionJsonBrandingIconAlignLeft GithubActionJsonBrandingIcon = "align-left"
const GithubActionJsonBrandingIconAlignRight GithubActionJsonBrandingIcon = "align-right"
const GithubActionJsonBrandingIconAnchor GithubActionJsonBrandingIcon = "anchor"
const GithubActionJsonBrandingIconAperture GithubActionJsonBrandingIcon = "aperture"
const GithubActionJsonBrandingIconArchive GithubActionJsonBrandingIcon = "archive"
const GithubActionJsonBrandingIconArrowDown GithubActionJsonBrandingIcon = "arrow-down"
const GithubActionJsonBrandingIconArrowDownCircle GithubActionJsonBrandingIcon = "arrow-down-circle"
const GithubActionJsonBrandingIconArrowDownLeft GithubActionJsonBrandingIcon = "arrow-down-left"
const GithubActionJsonBrandingIconArrowDownRight GithubActionJsonBrandingIcon = "arrow-down-right"
const GithubActionJsonBrandingIconArrowLeft GithubActionJsonBrandingIcon = "arrow-left"
const GithubActionJsonBrandingIconArrowLeftCircle GithubActionJsonBrandingIcon = "arrow-left-circle"
const GithubActionJsonBrandingIconArrowRight GithubActionJsonBrandingIcon = "arrow-right"
const GithubActionJsonBrandingIconArrowRightCircle GithubActionJsonBrandingIcon = "arrow-right-circle"
const GithubActionJsonBrandingIconArrowUp GithubActionJsonBrandingIcon = "arrow-up"
const GithubActionJsonBrandingIconArrowUpCircle GithubActionJsonBrandingIcon = "arrow-up-circle"
const GithubActionJsonBrandingIconArrowUpLeft GithubActionJsonBrandingIcon = "arrow-up-left"
const GithubActionJsonBrandingIconArrowUpRight GithubActionJsonBrandingIcon = "arrow-up-right"
const GithubActionJsonBrandingIconAtSign GithubActionJsonBrandingIcon = "at-sign"
const GithubActionJsonBrandingIconAward GithubActionJsonBrandingIcon = "award"
const GithubActionJsonBrandingIconBarChart GithubActionJsonBrandingIcon = "bar-chart"
const GithubActionJsonBrandingIconBarChart2 GithubActionJsonBrandingIcon = "bar-chart-2"
const GithubActionJsonBrandingIconBattery GithubActionJsonBrandingIcon = "battery"
const GithubActionJsonBrandingIconBatteryCharging GithubActionJsonBrandingIcon = "battery-charging"
const GithubActionJsonBrandingIconBell GithubActionJsonBrandingIcon = "bell"
const GithubActionJsonBrandingIconBellOff GithubActionJsonBrandingIcon = "bell-off"
const GithubActionJsonBrandingIconBluetooth GithubActionJsonBrandingIcon = "bluetooth"
const GithubActionJsonBrandingIconBold GithubActionJsonBrandingIcon = "bold"
const GithubActionJsonBrandingIconBook GithubActionJsonBrandingIcon = "book"
const GithubActionJsonBrandingIconBookOpen GithubActionJsonBrandingIcon = "book-open"
const GithubActionJsonBrandingIconBookmark GithubActionJsonBrandingIcon = "bookmark"
const GithubActionJsonBrandingIconBox GithubActionJsonBrandingIcon = "box"
const GithubActionJsonBrandingIconBriefcase GithubActionJsonBrandingIcon = "briefcase"
const GithubActionJsonBrandingIconCalendar GithubActionJsonBrandingIcon = "calendar"
const GithubActionJsonBrandingIconCamera GithubActionJsonBrandingIcon = "camera"
const GithubActionJsonBrandingIconCameraOff GithubActionJsonBrandingIcon = "camera-off"
const GithubActionJsonBrandingIconCast GithubActionJsonBrandingIcon = "cast"
const GithubActionJsonBrandingIconCheck GithubActionJsonBrandingIcon = "check"
const GithubActionJsonBrandingIconCheckCircle GithubActionJsonBrandingIcon = "check-circle"
const GithubActionJsonBrandingIconCheckSquare GithubActionJsonBrandingIcon = "check-square"
const GithubActionJsonBrandingIconChevronDown GithubActionJsonBrandingIcon = "chevron-down"
const GithubActionJsonBrandingIconChevronLeft GithubActionJsonBrandingIcon = "chevron-left"
const GithubActionJsonBrandingIconChevronRight GithubActionJsonBrandingIcon = "chevron-right"
const GithubActionJsonBrandingIconChevronUp GithubActionJsonBrandingIcon = "chevron-up"
const GithubActionJsonBrandingIconChevronsDown GithubActionJsonBrandingIcon = "chevrons-down"
const GithubActionJsonBrandingIconChevronsLeft GithubActionJsonBrandingIcon = "chevrons-left"
const GithubActionJsonBrandingIconChevronsRight GithubActionJsonBrandingIcon = "chevrons-right"
const GithubActionJsonBrandingIconChevronsUp GithubActionJsonBrandingIcon = "chevrons-up"
const GithubActionJsonBrandingIconCircle GithubActionJsonBrandingIcon = "circle"
const GithubActionJsonBrandingIconClipboard GithubActionJsonBrandingIcon = "clipboard"
const GithubActionJsonBrandingIconClock GithubActionJsonBrandingIcon = "clock"
const GithubActionJsonBrandingIconCloud GithubActionJsonBrandingIcon = "cloud"
const GithubActionJsonBrandingIconCloudDrizzle GithubActionJsonBrandingIcon = "cloud-drizzle"
const GithubActionJsonBrandingIconCloudLightning GithubActionJsonBrandingIcon = "cloud-lightning"
const GithubActionJsonBrandingIconCloudOff GithubActionJsonBrandingIcon = "cloud-off"
const GithubActionJsonBrandingIconCloudRain GithubActionJsonBrandingIcon = "cloud-rain"
const GithubActionJsonBrandingIconCloudSnow GithubActionJsonBrandingIcon = "cloud-snow"
const GithubActionJsonBrandingIconCode GithubActionJsonBrandingIcon = "code"
const GithubActionJsonBrandingIconCommand GithubActionJsonBrandingIcon = "command"
const GithubActionJsonBrandingIconCompass GithubActionJsonBrandingIcon = "compass"
const GithubActionJsonBrandingIconCopy GithubActionJsonBrandingIcon = "copy"
const GithubActionJsonBrandingIconCornerDownLeft GithubActionJsonBrandingIcon = "corner-down-left"
const GithubActionJsonBrandingIconCornerDownRight GithubActionJsonBrandingIcon = "corner-down-right"
const GithubActionJsonBrandingIconCornerLeftDown GithubActionJsonBrandingIcon = "corner-left-down"
const GithubActionJsonBrandingIconCornerLeftUp GithubActionJsonBrandingIcon = "corner-left-up"
const GithubActionJsonBrandingIconCornerRightDown GithubActionJsonBrandingIcon = "corner-right-down"
const GithubActionJsonBrandingIconCornerRightUp GithubActionJsonBrandingIcon = "corner-right-up"
const GithubActionJsonBrandingIconCornerUpLeft GithubActionJsonBrandingIcon = "corner-up-left"
const GithubActionJsonBrandingIconCornerUpRight GithubActionJsonBrandingIcon = "corner-up-right"
const GithubActionJsonBrandingIconCpu GithubActionJsonBrandingIcon = "cpu"
const GithubActionJsonBrandingIconCreditCard GithubActionJsonBrandingIcon = "credit-card"
const GithubActionJsonBrandingIconCrop GithubActionJsonBrandingIcon = "crop"
const GithubActionJsonBrandingIconCrosshair GithubActionJsonBrandingIcon = "crosshair"
const GithubActionJsonBrandingIconDatabase GithubActionJsonBrandingIcon = "database"
const GithubActionJsonBrandingIconDelete GithubActionJsonBrandingIcon = "delete"
const GithubActionJsonBrandingIconDisc GithubActionJsonBrandingIcon = "disc"
const GithubActionJsonBrandingIconDollarSign GithubActionJsonBrandingIcon = "dollar-sign"
const GithubActionJsonBrandingIconDownload GithubActionJsonBrandingIcon = "download"
const GithubActionJsonBrandingIconDownloadCloud GithubActionJsonBrandingIcon = "download-cloud"
const GithubActionJsonBrandingIconDroplet GithubActionJsonBrandingIcon = "droplet"
const GithubActionJsonBrandingIconEdit GithubActionJsonBrandingIcon = "edit"
const GithubActionJsonBrandingIconEdit2 GithubActionJsonBrandingIcon = "edit-2"
const GithubActionJsonBrandingIconEdit3 GithubActionJsonBrandingIcon = "edit-3"
const GithubActionJsonBrandingIconExternalLink GithubActionJsonBrandingIcon = "external-link"
const GithubActionJsonBrandingIconEye GithubActionJsonBrandingIcon = "eye"
const GithubActionJsonBrandingIconEyeOff GithubActionJsonBrandingIcon = "eye-off"
const GithubActionJsonBrandingIconFastForward GithubActionJsonBrandingIcon = "fast-forward"
const GithubActionJsonBrandingIconFeather GithubActionJsonBrandingIcon = "feather"
const GithubActionJsonBrandingIconFile GithubActionJsonBrandingIcon = "file"
const GithubActionJsonBrandingIconFileMinus GithubActionJsonBrandingIcon = "file-minus"
const GithubActionJsonBrandingIconFilePlus GithubActionJsonBrandingIcon = "file-plus"
const GithubActionJsonBrandingIconFileText GithubActionJsonBrandingIcon = "file-text"
const GithubActionJsonBrandingIconFilm GithubActionJsonBrandingIcon = "film"
const GithubActionJsonBrandingIconFilter GithubActionJsonBrandingIcon = "filter"
const GithubActionJsonBrandingIconFlag GithubActionJsonBrandingIcon = "flag"
const GithubActionJsonBrandingIconFolder GithubActionJsonBrandingIcon = "folder"
const GithubActionJsonBrandingIconFolderMinus GithubActionJsonBrandingIcon = "folder-minus"
const GithubActionJsonBrandingIconFolderPlus GithubActionJsonBrandingIcon = "folder-plus"
const GithubActionJsonBrandingIconGift GithubActionJsonBrandingIcon = "gift"
const GithubActionJsonBrandingIconGitBranch GithubActionJsonBrandingIcon = "git-branch"
const GithubActionJsonBrandingIconGitCommit GithubActionJsonBrandingIcon = "git-commit"
const GithubActionJsonBrandingIconGitMerge GithubActionJsonBrandingIcon = "git-merge"
const GithubActionJsonBrandingIconGitPullRequest GithubActionJsonBrandingIcon = "git-pull-request"
const GithubActionJsonBrandingIconGlobe GithubActionJsonBrandingIcon = "globe"
const GithubActionJsonBrandingIconGrid GithubActionJsonBrandingIcon = "grid"
const GithubActionJsonBrandingIconHardDrive GithubActionJsonBrandingIcon = "hard-drive"
const GithubActionJsonBrandingIconHash GithubActionJsonBrandingIcon = "hash"
const GithubActionJsonBrandingIconHeadphones GithubActionJsonBrandingIcon = "headphones"
const GithubActionJsonBrandingIconHeart GithubActionJsonBrandingIcon = "heart"
const GithubActionJsonBrandingIconHelpCircle GithubActionJsonBrandingIcon = "help-circle"
const GithubActionJsonBrandingIconHome GithubActionJsonBrandingIcon = "home"
const GithubActionJsonBrandingIconImage GithubActionJsonBrandingIcon = "image"
const GithubActionJsonBrandingIconInbox GithubActionJsonBrandingIcon = "inbox"
const GithubActionJsonBrandingIconInfo GithubActionJsonBrandingIcon = "info"
const GithubActionJsonBrandingIconItalic GithubActionJsonBrandingIcon = "italic"
const GithubActionJsonBrandingIconLayers GithubActionJsonBrandingIcon = "layers"
const GithubActionJsonBrandingIconLayout GithubActionJsonBrandingIcon = "layout"
const GithubActionJsonBrandingIconLifeBuoy GithubActionJsonBrandingIcon = "life-buoy"
const GithubActionJsonBrandingIconLink GithubActionJsonBrandingIcon = "link"
const GithubActionJsonBrandingIconLink2 GithubActionJsonBrandingIcon = "link-2"
const GithubActionJsonBrandingIconList GithubActionJsonBrandingIcon = "list"
const GithubActionJsonBrandingIconLoader GithubActionJsonBrandingIcon = "loader"
const GithubActionJsonBrandingIconLock GithubActionJsonBrandingIcon = "lock"
const GithubActionJsonBrandingIconLogIn GithubActionJsonBrandingIcon = "log-in"
const GithubActionJsonBrandingIconLogOut GithubActionJsonBrandingIcon = "log-out"
const GithubActionJsonBrandingIconMail GithubActionJsonBrandingIcon = "mail"
const GithubActionJsonBrandingIconMap GithubActionJsonBrandingIcon = "map"
const GithubActionJsonBrandingIconMapPin GithubActionJsonBrandingIcon = "map-pin"
const GithubActionJsonBrandingIconMaximize GithubActionJsonBrandingIcon = "maximize"
const GithubActionJsonBrandingIconMaximize2 GithubActionJsonBrandingIcon = "maximize-2"
const GithubActionJsonBrandingIconMenu GithubActionJsonBrandingIcon = "menu"
const GithubActionJsonBrandingIconMessageCircle GithubActionJsonBrandingIcon = "message-circle"
const GithubActionJsonBrandingIconMessageSquare GithubActionJsonBrandingIcon = "message-square"
const GithubActionJsonBrandingIconMic GithubActionJsonBrandingIcon = "mic"
const GithubActionJsonBrandingIconMicOff GithubActionJsonBrandingIcon = "mic-off"
const GithubActionJsonBrandingIconMinimize GithubActionJsonBrandingIcon = "minimize"
const GithubActionJsonBrandingIconMinimize2 GithubActionJsonBrandingIcon = "minimize-2"
const GithubActionJsonBrandingIconMinus GithubActionJsonBrandingIcon = "minus"
const GithubActionJsonBrandingIconMinusCircle GithubActionJsonBrandingIcon = "minus-circle"
const GithubActionJsonBrandingIconMinusSquare GithubActionJsonBrandingIcon = "minus-square"
const GithubActionJsonBrandingIconMonitor GithubActionJsonBrandingIcon = "monitor"
const GithubActionJsonBrandingIconMoon GithubActionJsonBrandingIcon = "moon"
const GithubActionJsonBrandingIconMoreHorizontal GithubActionJsonBrandingIcon = "more-horizontal"
const GithubActionJsonBrandingIconMoreVertical GithubActionJsonBrandingIcon = "more-vertical"
const GithubActionJsonBrandingIconMove GithubActionJsonBrandingIcon = "move"
const GithubActionJsonBrandingIconMusic GithubActionJsonBrandingIcon = "music"
const GithubActionJsonBrandingIconNavigation GithubActionJsonBrandingIcon = "navigation"
const GithubActionJsonBrandingIconNavigation2 GithubActionJsonBrandingIcon = "navigation-2"
const GithubActionJsonBrandingIconOctagon GithubActionJsonBrandingIcon = "octagon"
const GithubActionJsonBrandingIconPackage GithubActionJsonBrandingIcon = "package"
const GithubActionJsonBrandingIconPaperclip GithubActionJsonBrandingIcon = "paperclip"
const GithubActionJsonBrandingIconPause GithubActionJsonBrandingIcon = "pause"
const GithubActionJsonBrandingIconPauseCircle GithubActionJsonBrandingIcon = "pause-circle"
const GithubActionJsonBrandingIconPercent GithubActionJsonBrandingIcon = "percent"
const GithubActionJsonBrandingIconPhone GithubActionJsonBrandingIcon = "phone"
const GithubActionJsonBrandingIconPhoneCall GithubActionJsonBrandingIcon = "phone-call"
const GithubActionJsonBrandingIconPhoneForwarded GithubActionJsonBrandingIcon = "phone-forwarded"
const GithubActionJsonBrandingIconPhoneIncoming GithubActionJsonBrandingIcon = "phone-incoming"
const GithubActionJsonBrandingIconPhoneMissed GithubActionJsonBrandingIcon = "phone-missed"
const GithubActionJsonBrandingIconPhoneOff GithubActionJsonBrandingIcon = "phone-off"
const GithubActionJsonBrandingIconPhoneOutgoing GithubActionJsonBrandingIcon = "phone-outgoing"
const GithubActionJsonBrandingIconPieChart GithubActionJsonBrandingIcon = "pie-chart"
const GithubActionJsonBrandingIconPlay GithubActionJsonBrandingIcon = "play"
const GithubActionJsonBrandingIconPlayCircle GithubActionJsonBrandingIcon = "play-circle"
const GithubActionJsonBrandingIconPlus GithubActionJsonBrandingIcon = "plus"
const GithubActionJsonBrandingIconPlusCircle GithubActionJsonBrandingIcon = "plus-circle"
const GithubActionJsonBrandingIconPlusSquare GithubActionJsonBrandingIcon = "plus-square"
const GithubActionJsonBrandingIconPocket GithubActionJsonBrandingIcon = "pocket"
const GithubActionJsonBrandingIconPower GithubActionJsonBrandingIcon = "power"
const GithubActionJsonBrandingIconPrinter GithubActionJsonBrandingIcon = "printer"
const GithubActionJsonBrandingIconRadio GithubActionJsonBrandingIcon = "radio"
const GithubActionJsonBrandingIconRefreshCcw GithubActionJsonBrandingIcon = "refresh-ccw"
const GithubActionJsonBrandingIconRefreshCw GithubActionJsonBrandingIcon = "refresh-cw"
const GithubActionJsonBrandingIconRepeat GithubActionJsonBrandingIcon = "repeat"
const GithubActionJsonBrandingIconRewind GithubActionJsonBrandingIcon = "rewind"
const GithubActionJsonBrandingIconRotateCcw GithubActionJsonBrandingIcon = "rotate-ccw"
const GithubActionJsonBrandingIconRotateCw GithubActionJsonBrandingIcon = "rotate-cw"
const GithubActionJsonBrandingIconRss GithubActionJsonBrandingIcon = "rss"
const GithubActionJsonBrandingIconSave GithubActionJsonBrandingIcon = "save"
const GithubActionJsonBrandingIconScissors GithubActionJsonBrandingIcon = "scissors"
const GithubActionJsonBrandingIconSearch GithubActionJsonBrandingIcon = "search"
const GithubActionJsonBrandingIconSend GithubActionJsonBrandingIcon = "send"
const GithubActionJsonBrandingIconServer GithubActionJsonBrandingIcon = "server"
const GithubActionJsonBrandingIconSettings GithubActionJsonBrandingIcon = "settings"
const GithubActionJsonBrandingIconShare GithubActionJsonBrandingIcon = "share"
const GithubActionJsonBrandingIconShare2 GithubActionJsonBrandingIcon = "share-2"
const GithubActionJsonBrandingIconShield GithubActionJsonBrandingIcon = "shield"
const GithubActionJsonBrandingIconShieldOff GithubActionJsonBrandingIcon = "shield-off"
const GithubActionJsonBrandingIconShoppingBag GithubActionJsonBrandingIcon = "shopping-bag"
const GithubActionJsonBrandingIconShoppingCart GithubActionJsonBrandingIcon = "shopping-cart"
const GithubActionJsonBrandingIconShuffle GithubActionJsonBrandingIcon = "shuffle"
const GithubActionJsonBrandingIconSidebar GithubActionJsonBrandingIcon = "sidebar"
const GithubActionJsonBrandingIconSkipBack GithubActionJsonBrandingIcon = "skip-back"
const GithubActionJsonBrandingIconSkipForward GithubActionJsonBrandingIcon = "skip-forward"
const GithubActionJsonBrandingIconSlash GithubActionJsonBrandingIcon = "slash"
const GithubActionJsonBrandingIconSliders GithubActionJsonBrandingIcon = "sliders"
const GithubActionJsonBrandingIconSmartphone GithubActionJsonBrandingIcon = "smartphone"
const GithubActionJsonBrandingIconSpeaker GithubActionJsonBrandingIcon = "speaker"
const GithubActionJsonBrandingIconSquare GithubActionJsonBrandingIcon = "square"
const GithubActionJsonBrandingIconStar GithubActionJsonBrandingIcon = "star"
const GithubActionJsonBrandingIconStopCircle GithubActionJsonBrandingIcon = "stop-circle"
const GithubActionJsonBrandingIconSun GithubActionJsonBrandingIcon = "sun"
const GithubActionJsonBrandingIconSunrise GithubActionJsonBrandingIcon = "sunrise"
const GithubActionJsonBrandingIconSunset GithubActionJsonBrandingIcon = "sunset"
const GithubActionJsonBrandingIconTable GithubActionJsonBrandingIcon = "table"
const GithubActionJsonBrandingIconTablet GithubActionJsonBrandingIcon = "tablet"
const GithubActionJsonBrandingIconTag GithubActionJsonBrandingIcon = "tag"
const GithubActionJsonBrandingIconTarget GithubActionJsonBrandingIcon = "target"
const GithubActionJsonBrandingIconTerminal GithubActionJsonBrandingIcon = "terminal"
const GithubActionJsonBrandingIconThermometer GithubActionJsonBrandingIcon = "thermometer"
const GithubActionJsonBrandingIconThumbsDown GithubActionJsonBrandingIcon = "thumbs-down"
const GithubActionJsonBrandingIconThumbsUp GithubActionJsonBrandingIcon = "thumbs-up"
const GithubActionJsonBrandingIconToggleLeft GithubActionJsonBrandingIcon = "toggle-left"
const GithubActionJsonBrandingIconToggleRight GithubActionJsonBrandingIcon = "toggle-right"
const GithubActionJsonBrandingIconTrash GithubActionJsonBrandingIcon = "trash"
const GithubActionJsonBrandingIconTrash2 GithubActionJsonBrandingIcon = "trash-2"
const GithubActionJsonBrandingIconTrendingDown GithubActionJsonBrandingIcon = "trending-down"
const GithubActionJsonBrandingIconTrendingUp GithubActionJsonBrandingIcon = "trending-up"
const GithubActionJsonBrandingIconTriangle GithubActionJsonBrandingIcon = "triangle"
const GithubActionJsonBrandingIconTruck GithubActionJsonBrandingIcon = "truck"
const GithubActionJsonBrandingIconTv GithubActionJsonBrandingIcon = "tv"
const GithubActionJsonBrandingIconType GithubActionJsonBrandingIcon = "type"
const GithubActionJsonBrandingIconUmbrella GithubActionJsonBrandingIcon = "umbrella"
const GithubActionJsonBrandingIconUnderline GithubActionJsonBrandingIcon = "underline"
const GithubActionJsonBrandingIconUnlock GithubActionJsonBrandingIcon = "unlock"
const GithubActionJsonBrandingIconUpload GithubActionJsonBrandingIcon = "upload"
const GithubActionJsonBrandingIconUploadCloud GithubActionJsonBrandingIcon = "upload-cloud"
const GithubActionJsonBrandingIconUser GithubActionJsonBrandingIcon = "user"
const GithubActionJsonBrandingIconUserCheck GithubActionJsonBrandingIcon = "user-check"
const GithubActionJsonBrandingIconUserMinus GithubActionJsonBrandingIcon = "user-minus"
const GithubActionJsonBrandingIconUserPlus GithubActionJsonBrandingIcon = "user-plus"
const GithubActionJsonBrandingIconUserX GithubActionJsonBrandingIcon = "user-x"
const GithubActionJsonBrandingIconUsers GithubActionJsonBrandingIcon = "users"
const GithubActionJsonBrandingIconVideo GithubActionJsonBrandingIcon = "video"
const GithubActionJsonBrandingIconVideoOff GithubActionJsonBrandingIcon = "video-off"
const GithubActionJsonBrandingIconVoicemail GithubActionJsonBrandingIcon = "voicemail"
const GithubActionJsonBrandingIconVolume GithubActionJsonBrandingIcon = "volume"
const GithubActionJsonBrandingIconVolume1 GithubActionJsonBrandingIcon = "volume-1"
const GithubActionJsonBrandingIconVolume2 GithubActionJsonBrandingIcon = "volume-2"
const GithubActionJsonBrandingIconVolumeX GithubActionJsonBrandingIcon = "volume-x"
const GithubActionJsonBrandingIconWatch GithubActionJsonBrandingIcon = "watch"
const GithubActionJsonBrandingIconWifi GithubActionJsonBrandingIcon = "wifi"
const GithubActionJsonBrandingIconWifiOff GithubActionJsonBrandingIcon = "wifi-off"
const GithubActionJsonBrandingIconWind GithubActionJsonBrandingIcon = "wind"
const GithubActionJsonBrandingIconX GithubActionJsonBrandingIcon = "x"
const GithubActionJsonBrandingIconXCircle GithubActionJsonBrandingIcon = "x-circle"
const GithubActionJsonBrandingIconXSquare GithubActionJsonBrandingIcon = "x-square"
const GithubActionJsonBrandingIconZap GithubActionJsonBrandingIcon = "zap"
const GithubActionJsonBrandingIconZapOff GithubActionJsonBrandingIcon = "zap-off"
const GithubActionJsonBrandingIconZoomIn GithubActionJsonBrandingIcon = "zoom-in"
const GithubActionJsonBrandingIconZoomOut GithubActionJsonBrandingIcon = "zoom-out"

var enumValues_GithubActionJsonBrandingIcon = []interface{}{
	"activity",
	"airplay",
	"alert-circle",
	"alert-octagon",
	"alert-triangle",
	"align-center",
	"align-justify",
	"align-left",
	"align-right",
	"anchor",
	"aperture",
	"archive",
	"arrow-down-circle",
	"arrow-down-left",
	"arrow-down-right",
	"arrow-down",
	"arrow-left-circle",
	"arrow-left",
	"arrow-right-circle",
	"arrow-right",
	"arrow-up-circle",
	"arrow-up-left",
	"arrow-up-right",
	"arrow-up",
	"at-sign",
	"award",
	"bar-chart-2",
	"bar-chart",
	"battery-charging",
	"battery",
	"bell-off",
	"bell",
	"bluetooth",
	"bold",
	"book-open",
	"book",
	"bookmark",
	"box",
	"briefcase",
	"calendar",
	"camera-off",
	"camera",
	"cast",
	"check-circle",
	"check-square",
	"check",
	"chevron-down",
	"chevron-left",
	"chevron-right",
	"chevron-up",
	"chevrons-down",
	"chevrons-left",
	"chevrons-right",
	"chevrons-up",
	"circle",
	"clipboard",
	"clock",
	"cloud-drizzle",
	"cloud-lightning",
	"cloud-off",
	"cloud-rain",
	"cloud-snow",
	"cloud",
	"code",
	"command",
	"compass",
	"copy",
	"corner-down-left",
	"corner-down-right",
	"corner-left-down",
	"corner-left-up",
	"corner-right-down",
	"corner-right-up",
	"corner-up-left",
	"corner-up-right",
	"cpu",
	"credit-card",
	"crop",
	"crosshair",
	"database",
	"delete",
	"disc",
	"dollar-sign",
	"download-cloud",
	"download",
	"droplet",
	"edit-2",
	"edit-3",
	"edit",
	"external-link",
	"eye-off",
	"eye",
	"fast-forward",
	"feather",
	"file-minus",
	"file-plus",
	"file-text",
	"file",
	"film",
	"filter",
	"flag",
	"folder-minus",
	"folder-plus",
	"folder",
	"gift",
	"git-branch",
	"git-commit",
	"git-merge",
	"git-pull-request",
	"globe",
	"grid",
	"hard-drive",
	"hash",
	"headphones",
	"heart",
	"help-circle",
	"home",
	"image",
	"inbox",
	"info",
	"italic",
	"layers",
	"layout",
	"life-buoy",
	"link-2",
	"link",
	"list",
	"loader",
	"lock",
	"log-in",
	"log-out",
	"mail",
	"map-pin",
	"map",
	"maximize-2",
	"maximize",
	"menu",
	"message-circle",
	"message-square",
	"mic-off",
	"mic",
	"minimize-2",
	"minimize",
	"minus-circle",
	"minus-square",
	"minus",
	"monitor",
	"moon",
	"more-horizontal",
	"more-vertical",
	"move",
	"music",
	"navigation-2",
	"navigation",
	"octagon",
	"package",
	"paperclip",
	"pause-circle",
	"pause",
	"percent",
	"phone-call",
	"phone-forwarded",
	"phone-incoming",
	"phone-missed",
	"phone-off",
	"phone-outgoing",
	"phone",
	"pie-chart",
	"play-circle",
	"play",
	"plus-circle",
	"plus-square",
	"plus",
	"pocket",
	"power",
	"printer",
	"radio",
	"refresh-ccw",
	"refresh-cw",
	"repeat",
	"rewind",
	"rotate-ccw",
	"rotate-cw",
	"rss",
	"save",
	"scissors",
	"search",
	"send",
	"server",
	"settings",
	"share-2",
	"share",
	"shield-off",
	"shield",
	"shopping-bag",
	"shopping-cart",
	"shuffle",
	"sidebar",
	"skip-back",
	"skip-forward",
	"slash",
	"sliders",
	"smartphone",
	"speaker",
	"square",
	"star",
	"stop-circle",
	"sun",
	"sunrise",
	"sunset",
	"table",
	"tablet",
	"tag",
	"target",
	"terminal",
	"thermometer",
	"thumbs-down",
	"thumbs-up",
	"toggle-left",
	"toggle-right",
	"trash-2",
	"trash",
	"trending-down",
	"trending-up",
	"triangle",
	"truck",
	"tv",
	"type",
	"umbrella",
	"underline",
	"unlock",
	"upload-cloud",
	"upload",
	"user-check",
	"user-minus",
	"user-plus",
	"user-x",
	"user",
	"users",
	"video-off",
	"video",
	"voicemail",
	"volume-1",
	"volume-2",
	"volume-x",
	"volume",
	"watch",
	"wifi-off",
	"wifi",
	"wind",
	"x-circle",
	"x-square",
	"x",
	"zap-off",
	"zap",
	"zoom-in",
	"zoom-out",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GithubActionJsonBrandingIcon) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GithubActionJsonBrandingIcon {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GithubActionJsonBrandingIcon, v)
	}
	*j = GithubActionJsonBrandingIcon(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GithubActionJson) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["description"]; raw != nil && !ok {
		return fmt.Errorf("field description in GithubActionJson: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in GithubActionJson: required")
	}
	if _, ok := raw["runs"]; raw != nil && !ok {
		return fmt.Errorf("field runs in GithubActionJson: required")
	}
	type Plain GithubActionJson
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = GithubActionJson(plain)
	return nil
}

// Allows you to define conditions for the `post:` action execution. The `post:`
// action will only run if the conditions in `post-if` are met. If not set, then
// `post-if` defaults to `always()`.
type PostIf string

// Allows you to define conditions for the `pre:` action execution. The `pre:`
// action will only run if the conditions in `pre-if` are met. If not set, then
// `pre-if` defaults to `always()`. Note that the `step` context is unavailable, as
// no steps have run yet.
type PreIf string

// Configures the path to the composite action, and the application used to execute
// the code.
type RunsComposite struct {
	// The run steps that you plan to run in this action.
	Steps []RunsCompositeStepsElem `json:"steps" yaml:"steps" mapstructure:"steps"`

	// To use a composite run steps action, set this to 'composite'.
	Using interface{} `json:"using" yaml:"using" mapstructure:"using"`
}

type RunsCompositeStepsElem struct {
	// Prevents a job from failing when a step fails. Set to true to allow a job to
	// pass when this step fails.
	ContinueOnError interface{} `json:"continue-on-error,omitempty" yaml:"continue-on-error,omitempty" mapstructure:"continue-on-error,omitempty"`

	// Sets a map of environment variables for only that step.
	Env interface{} `json:"env,omitempty" yaml:"env,omitempty" mapstructure:"env,omitempty"`

	// A unique identifier for the step. You can use the `id` to reference the step in
	// contexts.
	Id *string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// You can use the if conditional to prevent a step from running unless a
	// condition is met. You can use any supported context and expression to create a
	// conditional.
	// Expressions in an if conditional do not require the ${{ }} syntax. For more
	// information, see
	// https://help.github.com/en/articles/contexts-and-expression-syntax-for-github-actions.
	If *string `json:"if,omitempty" yaml:"if,omitempty" mapstructure:"if,omitempty"`

	// The name of the composite run step.
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`

	// The command you want to run. This can be inline or a script in your action
	// repository.
	Run *string `json:"run,omitempty" yaml:"run,omitempty" mapstructure:"run,omitempty"`

	// The shell where you want to run the command.
	Shell interface{} `json:"shell,omitempty" yaml:"shell,omitempty" mapstructure:"shell,omitempty"`

	// Selects an action to run as part of a step in your job.
	Uses *string `json:"uses,omitempty" yaml:"uses,omitempty" mapstructure:"uses,omitempty"`

	// A map of the input parameters defined by the action. Each input parameter is a
	// key/value pair. Input parameters are set as environment variables. The variable
	// is prefixed with INPUT_ and converted to upper case.
	With map[string]interface{} `json:"with,omitempty" yaml:"with,omitempty" mapstructure:"with,omitempty"`

	// Specifies the working directory where the command is run.
	WorkingDirectory *string `json:"working-directory,omitempty" yaml:"working-directory,omitempty" mapstructure:"working-directory,omitempty"`
}

type RunsCompositeStepsElemShell_1 string

const RunsCompositeStepsElemShell_1_Bash RunsCompositeStepsElemShell_1 = "bash"
const RunsCompositeStepsElemShell_1_Cmd RunsCompositeStepsElemShell_1 = "cmd"
const RunsCompositeStepsElemShell_1_Powershell RunsCompositeStepsElemShell_1 = "powershell"
const RunsCompositeStepsElemShell_1_Pwsh RunsCompositeStepsElemShell_1 = "pwsh"
const RunsCompositeStepsElemShell_1_Python RunsCompositeStepsElemShell_1 = "python"
const RunsCompositeStepsElemShell_1_Sh RunsCompositeStepsElemShell_1 = "sh"

var enumValues_RunsCompositeStepsElemShell_1 = []interface{}{
	"bash",
	"pwsh",
	"python",
	"sh",
	"cmd",
	"powershell",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RunsCompositeStepsElemShell_1) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_RunsCompositeStepsElemShell_1 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_RunsCompositeStepsElemShell_1, v)
	}
	*j = RunsCompositeStepsElemShell_1(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RunsCompositeStepsElem) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	type Plain RunsCompositeStepsElem
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["continue-on-error"]; !ok || v == nil {
		plain.ContinueOnError = false
	}
	*j = RunsCompositeStepsElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RunsComposite) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["steps"]; raw != nil && !ok {
		return fmt.Errorf("field steps in RunsComposite: required")
	}
	if _, ok := raw["using"]; raw != nil && !ok {
		return fmt.Errorf("field using in RunsComposite: required")
	}
	type Plain RunsComposite
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = RunsComposite(plain)
	return nil
}

// Configures the image used for the Docker action.
type RunsDocker struct {
	// An array of strings that define the inputs for a Docker container. Inputs can
	// include hardcoded strings. GitHub passes the `args` to the container's
	// `ENTRYPOINT` when the container starts up.
	// The `args` are used in place of the `CMD` instruction in a `Dockerfile`. If you
	// use `CMD` in your `Dockerfile`, use the guidelines ordered by preference:
	// - Document required arguments in the action's README and omit them from the
	// `CMD` instruction.
	// - Use defaults that allow using the action without specifying any `args`.
	// - If the action exposes a `--help` flag, or something similar, use that to make
	// your action self-documenting.
	Args []string `json:"args,omitempty" yaml:"args,omitempty" mapstructure:"args,omitempty"`

	// Overrides the Docker `ENTRYPOINT` in the `Dockerfile`, or sets it if one wasn't
	// already specified. Use `entrypoint` when the `Dockerfile` does not specify an
	// `ENTRYPOINT` or you want to override the `ENTRYPOINT` instruction. If you omit
	// `entrypoint`, the commands you specify in the Docker `ENTRYPOINT` instruction
	// will execute. The Docker `ENTRYPOINT instruction has a *shell* form and *exec*
	// form. The Docker `ENTRYPOINT` documentation recommends using the *exec* form of
	// the `ENTRYPOINT` instruction.
	Entrypoint *string `json:"entrypoint,omitempty" yaml:"entrypoint,omitempty" mapstructure:"entrypoint,omitempty"`

	// Specifies a key/value map of environment variables to set in the container
	// environment.
	Env interface{} `json:"env,omitempty" yaml:"env,omitempty" mapstructure:"env,omitempty"`

	// The Docker image to use as the container to run the action. The value can be
	// the Docker base image name, a local `Dockerfile` in your repository, or a
	// public image in Docker Hub or another registry. To reference a `Dockerfile`
	// local to your repository, use a path relative to your action metadata file. The
	// `docker` application will execute this file.
	Image string `json:"image" yaml:"image" mapstructure:"image"`

	// Allows you to run a cleanup script once the `runs.entrypoint` action has
	// completed. GitHub Actions uses `docker run` to launch this action. Because
	// GitHub Actions runs the script inside a new container using the same base
	// image, the runtime state is different from the main `entrypoint` container. You
	// can access any state you need in either the workspace, `HOME`, or as a `STATE_`
	// variable. The `post-entrypoint:` action always runs by default but you can
	// override this using `post-if`.
	PostEntrypoint *string `json:"post-entrypoint,omitempty" yaml:"post-entrypoint,omitempty" mapstructure:"post-entrypoint,omitempty"`

	// PostIf corresponds to the JSON schema field "post-if".
	PostIf *PostIf `json:"post-if,omitempty" yaml:"post-if,omitempty" mapstructure:"post-if,omitempty"`

	// Allows you to run a script before the `entrypoint` action begins. For example,
	// you can use `pre-entrypoint:` to run a prerequisite setup script. GitHub
	// Actions uses `docker run` to launch this action, and runs the script inside a
	// new container that uses the same base image. This means that the runtime state
	// is different from the main `entrypoint` container, and any states you require
	// must be accessed in either the workspace, `HOME`, or as a `STATE_` variable.
	// The `pre-entrypoint:` action always runs by default but you can override this
	// using `pre-if`.
	PreEntrypoint *string `json:"pre-entrypoint,omitempty" yaml:"pre-entrypoint,omitempty" mapstructure:"pre-entrypoint,omitempty"`

	// PreIf corresponds to the JSON schema field "pre-if".
	PreIf *PreIf `json:"pre-if,omitempty" yaml:"pre-if,omitempty" mapstructure:"pre-if,omitempty"`

	// You must set this value to 'docker'.
	Using interface{} `json:"using" yaml:"using" mapstructure:"using"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RunsDocker) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["image"]; raw != nil && !ok {
		return fmt.Errorf("field image in RunsDocker: required")
	}
	if _, ok := raw["using"]; raw != nil && !ok {
		return fmt.Errorf("field using in RunsDocker: required")
	}
	type Plain RunsDocker
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = RunsDocker(plain)
	return nil
}

// Configures the path to the action's code and the application used to execute the
// code.
type RunsJavascript struct {
	// The file that contains your action code. The application specified in `using`
	// executes this file.
	Main string `json:"main" yaml:"main" mapstructure:"main"`

	// Allows you to run a script at the end of a job, once the `main:` action has
	// completed. For example, you can use `post:` to terminate certain processes or
	// remove unneeded files. The application specified with the `using` syntax will
	// execute this file. The `post:` action always runs by default but you can
	// override this using `post-if`.
	Post *string `json:"post,omitempty" yaml:"post,omitempty" mapstructure:"post,omitempty"`

	// PostIf corresponds to the JSON schema field "post-if".
	PostIf *PostIf `json:"post-if,omitempty" yaml:"post-if,omitempty" mapstructure:"post-if,omitempty"`

	// Allows you to run a script at the start of a job, before the `main:` action
	// begins. For example, you can use `pre:` to run a prerequisite setup script. The
	// application specified with the `using` syntax will execute this file. The
	// `pre:` action always runs by default but you can override this using `pre-if`.
	Pre *string `json:"pre,omitempty" yaml:"pre,omitempty" mapstructure:"pre,omitempty"`

	// PreIf corresponds to the JSON schema field "pre-if".
	PreIf *PreIf `json:"pre-if,omitempty" yaml:"pre-if,omitempty" mapstructure:"pre-if,omitempty"`

	// The application used to execute the code specified in `main`.
	Using RunsJavascriptUsing `json:"using" yaml:"using" mapstructure:"using"`
}

type RunsJavascriptUsing string

const RunsJavascriptUsingNode12 RunsJavascriptUsing = "node12"
const RunsJavascriptUsingNode16 RunsJavascriptUsing = "node16"
const RunsJavascriptUsingNode20 RunsJavascriptUsing = "node20"

var enumValues_RunsJavascriptUsing = []interface{}{
	"node12",
	"node16",
	"node20",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RunsJavascriptUsing) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_RunsJavascriptUsing {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_RunsJavascriptUsing, v)
	}
	*j = RunsJavascriptUsing(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RunsJavascript) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["main"]; raw != nil && !ok {
		return fmt.Errorf("field main in RunsJavascript: required")
	}
	if _, ok := raw["using"]; raw != nil && !ok {
		return fmt.Errorf("field using in RunsJavascript: required")
	}
	type Plain RunsJavascript
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = RunsJavascript(plain)
	return nil
}

type StringContainingExpressionSyntax string

// UnmarshalJSON implements json.Unmarshaler.
func (j *StringContainingExpressionSyntax) UnmarshalJSON(value []byte) error {
	type Plain StringContainingExpressionSyntax
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if matched, _ := regexp.MatchString(`^.*\$\{\{(.|[\r\n])*\}\}.*$`, string(plain)); !matched {
		return fmt.Errorf("field %s pattern match: must match %s", "", `^.*\$\{\{(.|[\r\n])*\}\}.*$`)
	}
	*j = StringContainingExpressionSyntax(plain)
	return nil
}
